---
- fail:
    msg: "Only set one of kubernetes_context or openshift_host"
  when: openshift_host is defined and kubernetes_context is defined

- include_tasks: "{{ tasks }}"
  with_items:
    - kubernetes_auth.yml
    - kubernetes.yml
  loop_control:
    loop_var: tasks
  when: kubernetes_context is defined

- name: Use kubectl or oc
  set_fact:
    kubectl_or_oc: "{{ openshift_oc_bin if openshift_oc_bin is defined else 'kubectl' }}"

- set_fact:
    deployment_object: "sts"

- name: Record deployment size
  shell: |
    {{ kubectl_or_oc }} get {{ deployment_object }} \
      {{ kubernetes_deployment_name }} \
      -n {{ kubernetes_namespace }} -o=jsonpath='{.status.replicas}'
  register: deployment_details
  ignore_errors: true

- name: Set expected post-deployment Replicas value
  set_fact:
    kubernetes_deployment_replica_size: "{{ deployment_details.stdout | int }}"
  when: deployment_details.rc == 0

- name: Delete existing Deployment
  shell: |
    {{ kubectl_or_oc }} delete {{ deployment_object }} \
      {{ kubernetes_deployment_name }} -n {{ kubernetes_namespace }}
  when: deployment_details.rc == 0

- name: Get Postgres Service Detail
  shell: "{{ kubectl_or_oc }} describe svc {{ postgresql_service_name }} -n {{ kubernetes_namespace }}"
  register: postgres_svc_details
  ignore_errors: true
  when: "pg_hostname is not defined or pg_hostname == ''"

- name: Deploy PostgreSQL (Kubernetes)
  block:
    - name: Template PostgreSQL Deployment (Kubernetes)
      template:
        src: "{{ role_path }}/helm/values.yaml.j2"
        dest: "{{ role_path }}/helm/values.yaml"

    - name: Deploy and Activate Postgres (Kubernetes)
      shell: |
        helm upgrade --install awx {{ role_path }}/helm
      register: kubernetes_pg_activate

  when:
    - pg_hostname is not defined or pg_hostname == ''
    - kubernetes_context is defined

- name: Set postgresql hostname to helm package service (Kubernetes)
  set_fact:
    pg_hostname: "{{ postgresql_service_name }}"
  when:
    - pg_hostname is not defined or pg_hostname == ''
    - kubernetes_context is defined

- name: Wait for Postgres to activate
  pause:
    seconds: "{{ postgress_activate_wait }}"
  when: kubernetes_pg_activate.changed

- name: Set image names if using custom registry
  block:
    - name: Set task image name
      set_fact:
        kubernetes_task_image: "{{ docker_registry }}/{{ docker_registry_repository }}/{{ task_image }}"
      when: kubernetes_task_image is not defined

    - name: Set web image name
      set_fact:
        kubernetes_web_image: "{{ docker_registry }}/{{ docker_registry_repository }}/{{ web_image }}"
      when: kubernetes_web_image is not defined
  when: docker_registry is defined

- name: Generate SSL certificates for RabbitMQ, if needed
  include_tasks: ssl_cert_gen.yml
  when: "rabbitmq_use_ssl|default(False)|bool"

- name: Get Kubernetes Config
  command: |
    {{ kubectl_or_oc }} config view -o json
  register: kube_config_cmd
  no_log: true

- name: Convert kube config to dictionary
  set_fact:
    kube_config: "{{ kube_config_cmd.stdout | from_json }}"
  no_log: true

- name: Extract current context from kube config
  set_fact:
    current_kube_context: "{{ kube_config['current-context'] }}"

- name: Find cluster for current context
  set_fact:
    kube_cluster: |
      {{ (kube_config.contexts |
          selectattr("name", "equalto", current_kube_context) |
          list)[0].context.cluster }}

- name: Find server for current context
  set_fact:
    kube_server: |
      {{ (kube_config.clusters |
          selectattr("name", "equalto", kube_cluster|trim) |
          list)[0].cluster.server }}

- name: Get kube version from api server
  uri:
    url: "{{ kube_server | trim }}/version"
    validate_certs: false
  register: kube_version

- name: Extract server version from command output
  set_fact:
    kube_api_version: "{{ kube_version.json.gitVersion[1:] }}"

- name: Determine StatefulSet api version
  set_fact:
    kubernetes_statefulset_api_version: "{{ 'apps/v1' if kube_api_version is version('1.9', '>=') else 'apps/v1beta1' }}"

# 安装 postgres
# kubectl apply
# awx pod 包含 awx_web、awx_task、memcached、rabbitmq 四个 container
# management pod 导入数据到 postgres 然后 delete
- name: Render deployment templates
  set_fact:
    "{{ item }}": "{{ lookup('template', item + '.yml.j2') }}"
  with_items:
    - 'deployment'
    - 'secret'
  no_log: true

- name: Apply Deployment
  shell: |
    echo {{ item | quote }} | {{ kubectl_or_oc }} apply -f -
  with_items:
    - "{{ deployment }}"
    - "{{ secret }}"
  no_log: true

- name: Delete any existing management pod
  shell: |
    {{ kubectl_or_oc }} -n {{ kubernetes_namespace }} \
      delete pod ansible-tower-management --grace-period=0 --ignore-not-found

- name: Template management pod
  set_fact:
    management_pod: "{{ lookup('template', 'management-pod.yml.j2') }}"

- name: Create management pod
  shell: |
    echo {{ management_pod | quote }} | {{ kubectl_or_oc }} apply -f -

- name: Wait for management pod to start
  shell: |
    {{ kubectl_or_oc }} -n {{ kubernetes_namespace }} \
      get pod ansible-tower-management -o jsonpath="{.status.phase}"
  register: result
  until: result.stdout == "Running"
  retries: 60
  delay: 10

- name: Migrate database
  shell: |
    {{ kubectl_or_oc }} -n {{ kubernetes_namespace }} exec ansible-tower-management -- \
      bash -c "awx-manage migrate --noinput"

- name: Check for Tower Super users
  shell: |
    {{ kubectl_or_oc }} -n {{ kubernetes_namespace }} exec ansible-tower-management -- \
      bash -c "echo 'from django.contrib.auth.models import User; nsu = User.objects.filter(is_superuser=True).count(); exit(0 if nsu > 0 else 1)' | awx-manage shell"
  register: super_check
  ignore_errors: true
  changed_when: super_check.rc > 0

- name: create django super user if it does not exist
  shell: |
    {{ kubectl_or_oc }} -n {{ kubernetes_namespace }} exec ansible-tower-management -- \
      bash -c "echo \"from django.contrib.auth.models import User; User.objects.create_superuser('{{ admin_user }}', '{{ admin_email }}', '{{ admin_password }}')\" | awx-manage shell"
  no_log: true
  when: super_check.rc > 0

- name: update django super user password
  shell: |
    {{ kubectl_or_oc }} -n {{ kubernetes_namespace }} exec ansible-tower-management -- \
      bash -c "awx-manage update_password --username='{{ admin_user }}' --password='{{ admin_password }}'"
  no_log: true
  register: result
  changed_when: "'Password updated' in result.stdout"

- name: Create the default organization if it is needed.
  shell: |
    {{ kubectl_or_oc }} -n {{ kubernetes_namespace }} exec ansible-tower-management -- \
      bash -c "awx-manage create_preload_data"
  register: cdo
  changed_when: "'added' in cdo.stdout"
  when: create_preload_data | bool

- name: Delete management pod
  shell: |
    {{ kubectl_or_oc }} -n {{ kubernetes_namespace }} \
      delete pod ansible-tower-management --grace-period=0 --ignore-not-found

- name: Scale up deployment
  shell: |
    {{ kubectl_or_oc }} -n {{ kubernetes_namespace }} \
      scale {{ deployment_object }} {{ kubernetes_deployment_name }} --replicas=0
    {{ kubectl_or_oc }} -n {{ kubernetes_namespace }} \
      scale {{ deployment_object }} {{ kubernetes_deployment_name }} --replicas={{ kubernetes_deployment_replica_size }}
